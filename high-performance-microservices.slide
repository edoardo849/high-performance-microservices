 ÂµPerformance 
Manchester
19 Oct 2016

Edo Scalafiotti
edoardo849@gmail.com
http://medium.com/@edoardo849
@edoardo849

* License and Materials

This presentation is licensed under the [[https://creativecommons.org/licenses/by/4.0/][Attribution 4.0 International]] licence.

The materials for this presentation are available on GitHub:

.link https://github.com/edoardo849/high-performance-microservices

An extended version is available on Medium:

.link https://goo.gl/xvqRXo

You are encouraged to remix, transform, or build upon the material, providing you give appropriate credit.

* The free lunch is over

- in 2005 the Moore Law applied to clock speed had stopped
- 3GHz CPUs for commercial use
- 4GHz expected in 2006 was only shipped in 2014 "Devil's Canyon"
- we should have 20GHz CPUs by now: my machine is running on 2.7GHz

* The CPU

.image assets/35years-CPU.png _ 700

* The future in 2005

Back in 2005 the near-term future performance growth drivers were:

- hyperthreading
- multicore
- cache

* The future in 2016

Much of the improvement in performance in the last two decades has come from architectural improvements:

- out of order execution (super-scalar)
- speculative execution
- vector (SSE) instructions

* The free lunch is over

* The solution in 3B
- Better Software (use of multi-core)
- Better Programming Languages (compiled, concurrent and efficient)
- Better Developers (mastering of hardware and software)

* Intermezzo: concurrency is not parallelism

* Scaling Computers vs Scaling Applications

- Faster CPUs, more transistors = Scale vertically (more powaaa)
- Multi Core CPUs = Scale horizontally (orchestration)

* Scaling Microservices

- X-axis: multiple copies of an application behin a load balancer
- Y-axis: splits the application into multiple, different services
- Z-axis: each server is responsible for only a subset of the data (i.e. customer type)

.image assets/scaling-cube.jpg _ 400

* What is the reason for scaling?
- Isn't there anything that we can do first?
- Hope for the best, prepare for the worst: set up an auto-scaling group

* Everything is a tradeoff
- Cost of power for vertical scaling
- Cost of orchestration for horizontal scaling (and higher skilled teams) ^^
- Cost of fine-tuning for optimization (and higher skilled teams) ^^

^ consultancy opportunities :-)

